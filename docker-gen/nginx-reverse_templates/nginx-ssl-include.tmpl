{{ $proto := "http" }}

    include /etc/nginx/include/ssl-base.conf;

{{ range $path, $containers := groupByMulti $ "Env.VIRTUAL_PATH" "," }}{{/*
    */}}{{ range $container := $containers }}{{/*
        */}}{{ $addrLen := len $container.Addresses }}
    # {{$container.Name}} {{"{{{"}}{{/*
    */}}{{ if $container.Env.VIRTUAL_SERVER_TYPE }}{{/*
            */}}{{ if eq $container.Env.VIRTUAL_SERVER_TYPE "seafile" }}
    location /~{{ $path }}/seafile {
        fastcgi_pass {{/*
            */}}{{ else }}
    location /{{ $path }} {
        proxy_pass {{ $proto }}://{{/*
            */}}{{ end }}{{/*
        */}}{{ else }}
    location /{{ $path }} {
        proxy_pass {{ $proto }}://{{/*

        */}}{{ end }}{{/*

        If only 1 port exposed, use that (((
        */}}{{ if eq $addrLen 1 }}{{/*
            */}}{{ with $address := index $container.Addresses 0 }}{{/*
                */}}{{ $address.IP }}:{{ $address.Port }};{{/*
        */}}{{ end }}{{/* )))
        If more than one port exposed, use the one matching VIRTUAL_PORT env var (((
        */}}{{ else if $container.Env.VIRTUAL_PORT }}{{/*
            */}}{{ range $address := .Addresses }}{{/*
                */}}{{ if eq $address.Port $container.Env.VIRTUAL_PORT }}{{/*
                    */}}{{ $address.IP }}:{{ $address.Port }};
{{/*
                */}}{{ end }}{{/*
            */}}{{ end }}{{/* )))
        Else default to standard web port 80 (((
        */}}{{ else }}{{/*
            */}}{{ range $address := $container.Addresses }}{{/*
                */}}{{ if eq $address.Port "80" }}{{/*
                    */}}{{ $address.IP }}:{{ $address.Port }};
{{/*
                */}}{{ end }}{{/*
            */}}{{ end }}{{/*
        */}}{{ end }}{{/* )))

        */}}{{ if $container.Env.VIRTUAL_SERVER_TYPE }}{{/*
            */}}{{ if eq $container.Env.VIRTUAL_SERVER_TYPE "seafile" }}
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        fastcgi_param  PATH_INFO        $fastcgi_script_name;

        fastcgi_param  SERVER_PROTOCOL  $server_protocol;
        fastcgi_param  QUERY_STRING     $query_string;
        fastcgi_param  REQUEST_METHOD   $request_method;
        fastcgi_param  CONTENT_TYPE     $content_type;
        fastcgi_param  CONTENT_LENGTH   $content_length;
        fastcgi_param  SERVER_ADDR      $server_addr;
        fastcgi_param  SERVER_PORT      $server_port;
        fastcgi_param  SERVER_NAME      $server_name;
        fastcgi_param  REMOTE_ADDR      $remote_addr;
        # fastcgi_param   HTTPS               on;
        # fastcgi_param   HTTP_SCHEME         https;

        # access_log      /var/log/nginx/access.log;
        # error_log       /var/log/nginx/error.log;
{{/*
            */}}{{ else if eq $container.Env.VIRTUAL_SERVER_TYPE "owncloud" }}
        client_max_body_size 10000M;
        # rewrite ^/{{ $path }}(.*)$ /owncloud$1 break;{{/*
        # Could not get this to work. See https://doc.owncloud.org/server/8.1/admin_manual/configuration_server/reverse_proxy_configuration.html#example
            */}}{{ else if eq $container.Env.VIRTUAL_SERVER_TYPE "rutorrent" }}
        rewrite ^/{{ $path }}(.*)$ /$1 break;{{/*
            */}}{{ else if eq $container.Env.VIRTUAL_SERVER_TYPE "program-o" }}
        # rewrite ^/({{ $path }}/)web(.*)$ /$1 break;{{/*
{{/*
            */}}{{ end }}{{/*
        */}}{{ else if ne $path "" }}
        rewrite ^/{{ $path }}(.*)$ /$1 break;{{/*
        */}}{{ end }}
    }
{{/*

    Seafile (((
    */}}{{ if $container.Env.VIRTUAL_SERVER_TYPE }}{{/*
        */}}{{ if eq $container.Env.VIRTUAL_SERVER_TYPE "seafile" }}
    location /~{{ $path }}/seafhttp {
        rewrite ^/~{{ $path }}/seafhttp(.*)$ $1 break;
{{/*
            */}}{{ range $address := $container.Addresses }}{{/*
                */}}{{ if eq $address.Port "8082" }}
        proxy_pass {{ $proto }}://{{ $address.IP }}:{{ $address.Port }};
{{/*
                */}}{{ end }}{{/*
            */}}{{ end }}
        client_max_body_size 10000M;
    }

    location /~{{ $path }}/seafmedia {
        rewrite ^/~{{ $path }}/seaf(media.*)$ /$1 break;
        root /srv/{{ $path }}/seafile/seafile/seahub;
    }{{/*
        */}}{{ end }}{{/*
    */}}{{ end }}{{/* )))*/}}
    # {{"}}}"}}
{{/*
    */}}{{ end }}{{/*
*/}}{{ end }}
