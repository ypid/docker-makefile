{{ $proto := "http" }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
    default upgrade;
    ''      '';
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log /proc/self/fd/1 vhost;
error_log /proc/self/fd/2;

server_tokens off;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _; # This is just an invalid value which will never trigger on a real hostname.
    return 503;
}

{{ $host := "web1.example.de" }}
{{ $hostAliase := "web2.example.de" }}
{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}

server {
    listen 80;
    listen [::]:80;
    server_name {{ $host }};
{{ if $hostAliase }}
    server_name {{ $hostAliase }};
{{ end }}


{{ range $path, $containers := groupByMulti $ "Env.VIRTUAL_PATH" "," }}{{/*
    */}}{{ range $container := $containers }}{{/*
        */}}{{ if $container.Env.VIRTUAL_CNAME }}{{/*
            */}}{{ if $container.Env.VIRTUAL_NOT_REDIRECT_TO_HTTPS }}{{ else }}
    server_name {{ $container.Env.VIRTUAL_CNAME }};{{/*
            */}}{{ end }}{{/*
        */}}{{ end }}{{/*
    */}}{{ end }}{{/*
*/}}{{ end }}

    return 301 https://$host$request_uri;
}

{{ range $path, $containers := groupByMulti $ "Env.VIRTUAL_PATH" "," }}{{/*
    */}}{{ range $container := $containers }}{{/*
        */}}{{ $addrLen := len $container.Addresses }}{{/*
        */}}{{ if $container.Env.VIRTUAL_CNAME }}{{/*
            */}}{{ if $container.Env.VIRTUAL_NOT_REDIRECT_TO_HTTPS }}
server {
    listen 80;
    listen [::]:80;

    server_name {{ $container.Env.VIRTUAL_CNAME }};

    include /etc/nginx/include/ssl-base.conf;

    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

    if ($scheme = 'http') {
        rewrite ^/wp-(admin|login.php) https://$host$uri permanent;
    }


    location / {
        # {{$container.Name}}
        proxy_pass {{ $proto }}://{{/*

        If only 1 port exposed, use that (((
        */}}{{ if eq $addrLen 1 }}{{/*
            */}}{{ with $address := index $container.Addresses 0 }}{{/*
                */}}{{ $address.IP }}:{{ $address.Port }};{{/*
        */}}{{ end }}{{/* )))
        If more than one port exposed, use the one matching VIRTUAL_PORT env var (((
        */}}{{ else if $container.Env.VIRTUAL_PORT }}{{/*
            */}}{{ range $address := .Addresses }}{{/*
                */}}{{ if eq $address.Port $container.Env.VIRTUAL_PORT }}{{/*
                    */}}{{ $address.IP }}:{{ $address.Port }};
{{/*
                */}}{{ end }}{{/*
            */}}{{ end }}{{/* )))
        Else default to standard web port 80 (((
        */}}{{ else }}{{/*
            */}}{{ range $address := $container.Addresses }}{{/*
                */}}{{ if eq $address.Port "80" }}{{/*
                    */}}{{ $address.IP }}:{{ $address.Port }};
{{/*
                */}}{{ end }}{{/*
            */}}{{ end }}{{/*
        */}}{{ end }}{{/*
            */}}{{ if eq $container.Env.VIRTUAL_SERVER_TYPE "owncloud" }}
        client_max_body_size 10000M;
        rewrite ^ /{{ $path }}/ redirect;
{{/*
            */}}{{ end }}
    }

}

{{/*
            */}}{{ end }}{{/*
        */}}{{ end }}{{/*
    */}}{{ end }}{{/*
*/}}{{ end }}

server {
    server_name {{ $host }};

    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

    include /etc/nginx/include/nginx-ssl-include.conf;
}

server {
    server_name {{ $hostAliase }};

    ssl_certificate /etc/ssl/{{ $hostAliase }}.pem;
    ssl_certificate_key /etc/ssl/{{ $hostAliase }}.key;

    include /etc/nginx/include/nginx-ssl-include.conf;
}

{{ range $path, $containers := groupByMulti $ "Env.VIRTUAL_PATH" "," }}{{/*
    */}}{{ range $container := $containers }}{{/*
        */}}{{ $addrLen := len $container.Addresses }}{{/*
        */}}{{ if $container.Env.VIRTUAL_CNAME }}

server {
    server_name {{ $container.Env.VIRTUAL_CNAME }};

    include /etc/nginx/include/ssl-base.conf;

    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

    location / {
        # {{$container.Name}}
        proxy_pass {{ $proto }}://{{/*

        If only 1 port exposed, use that (((
        */}}{{ if eq $addrLen 1 }}{{/*
            */}}{{ with $address := index $container.Addresses 0 }}{{/*
                */}}{{ $address.IP }}:{{ $address.Port }};{{/*
        */}}{{ end }}{{/* )))
        If more than one port exposed, use the one matching VIRTUAL_PORT env var (((
        */}}{{ else if $container.Env.VIRTUAL_PORT }}{{/*
            */}}{{ range $address := .Addresses }}{{/*
                */}}{{ if eq $address.Port $container.Env.VIRTUAL_PORT }}{{/*
                    */}}{{ $address.IP }}:{{ $address.Port }};
{{/*
                */}}{{ end }}{{/*
            */}}{{ end }}{{/* )))
        Else default to standard web port 80 (((
        */}}{{ else }}{{/*
            */}}{{ range $address := $container.Addresses }}{{/*
                */}}{{ if eq $address.Port "80" }}{{/*
                    */}}{{ $address.IP }}:{{ $address.Port }};
{{/*
                */}}{{ end }}{{/*
            */}}{{ end }}{{/*
        */}}{{ end }}{{/*
            */}}{{ if eq $container.Env.VIRTUAL_SERVER_TYPE "owncloud" }}
        client_max_body_size 10000M;
        rewrite ^ /{{ $path }}/ redirect;
{{/*
            */}}{{ end }}
    }

{{/*
            */}}{{ if eq $container.Env.VIRTUAL_SERVER_TYPE "owncloud" }}
    location /{{ $path }}/ {
        # {{$container.Name}}
        proxy_pass {{ $proto }}://{{/*

        If only 1 port exposed, use that (((
        */}}{{ if eq $addrLen 1 }}{{/*
            */}}{{ with $address := index $container.Addresses 0 }}{{/*
                */}}{{ $address.IP }}:{{ $address.Port }};{{/*
        */}}{{ end }}{{/* )))
        If more than one port exposed, use the one matching VIRTUAL_PORT env var (((
        */}}{{ else if $container.Env.VIRTUAL_PORT }}{{/*
            */}}{{ range $address := .Addresses }}{{/*
                */}}{{ if eq $address.Port $container.Env.VIRTUAL_PORT }}{{/*
                    */}}{{ $address.IP }}:{{ $address.Port }};
{{/*
                */}}{{ end }}{{/*
            */}}{{ end }}{{/* )))
        Else default to standard web port 80 (((
        */}}{{ else }}{{/*
            */}}{{ range $address := $container.Addresses }}{{/*
                */}}{{ if eq $address.Port "80" }}{{/*
                    */}}{{ $address.IP }}:{{ $address.Port }};
{{/*
                */}}{{ end }}{{/*
            */}}{{ end }}{{/*
        */}}{{ end }}
        client_max_body_size 10000M;
        ## rewrite ^/(.*)$ /{{ $path }}/$1 break;
    }
{{/*
            */}}{{ end }}
}
{{/*
        */}}{{ end }}{{/*
    */}}{{ end }}{{/*
*/}}{{ end }}
